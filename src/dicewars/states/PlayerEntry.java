/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dicewars.states;

import dicewars.Player;
import dicewars.PlayerHuman;
import dicewars.PlayerAI;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.event.ListDataListener;

/**
 *
 * @author ganter
 */
public class PlayerEntry extends JPanel {
    private final PlayerEntry THIS = this;
    private Player player;
    private SettingsState parent;

    public Player getPlayer() {
        return player;
    }
    

    /**
     * Creates new form PlayerEntry
     * @param panel
     */
    public PlayerEntry(SettingsState panel) {
        int pNum = PlayerHuman.getNumOfPlayers();
        parent = panel;
        player = new PlayerHuman((pNum <= Player.COLORS.length)? Player.COLORS[pNum] : Color.YELLOW);
        initComponents();
    }
    
    public void refresh(){
        lblPlayerID.setText("Player" +player.getId());
        boxTeam.setModel(new DefaultComboBoxModel<String>(){
            @Override
            public void setSelectedItem(Object val) {
                int t = Integer.parseInt(((String) val).substring(5));
                player.setTeam(t);
            }

            @Override
            public Object getSelectedItem() {
                return "Team "+player.getTeam();
            }

            @Override
            public int getSize() {
                return Player.getNumOfPlayers();
            }

            @Override
            public String getElementAt(int i) {
                return "Team "+(i+1);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        boxTeam = new JComboBox<>();
        boxColor = new JComboBox<>();
        boxPlayerType = new JComboBox<>();
        lblPlayerID = new JLabel();
        BtnDel = new JButton();

        boxTeam.setEditable(false);
        boxTeam.setModel(new DefaultComboBoxModel<String>(){
            @Override
            public void setSelectedItem(Object val) {
                int t = Integer.parseInt(((String) val).substring(5));
                player.setTeam(t);
            }

            @Override
            public Object getSelectedItem() {
                return "Team "+player.getTeam();
            }

            @Override
            public int getSize() {
                return Player.getNumOfPlayers();
            }

            @Override
            public String getElementAt(int i) {
                return "Team "+(i+1);
            }
        });
        boxTeam.setSelectedIndex(player.getId());
        
        boxColor.setModel(new DefaultComboBoxModel<Color>() {
            int selected;
            @Override
            public void setSelectedItem(Object anItem) {
                for(int i = 0; i< PlayerHuman.COLORS.length; i++){
                    if (PlayerHuman.COLORS[i].equals(anItem)){
                        selected=i;
                        return;
                    }
                }
                selected=0;
            }

            @Override
            public Object getSelectedItem() {
                return PlayerHuman.COLORS[selected];
            }

            @Override
            public int getSize() {
                return PlayerHuman.COLORS.length;
            }

            @Override
            public Color getElementAt(int i) {
                return PlayerHuman.COLORS[i];
            }
        });
        boxColor.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list,
                    Object value,
                    int index,
                    boolean isSelected,
                    boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                label.setText(" ");

                if (isSelected) {
                    label.setBackground(((Color) value).brighter());
                    label.setForeground((Color) value);

                    // unselected, and not the DnD drop location
                } else {
                    label.setBackground((Color) value);
                    label.setForeground((Color) value);
                };
                return label;

            }
        });
        boxColor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                player.setColor((Color) boxColor.getSelectedItem());
            }
        });
        boxColor.setSelectedItem(player.getColor());
        
        boxPlayerType.setModel(new DefaultComboBoxModel<>(new String[] {"Human", "AI"}));
        boxPlayerType.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch((String) boxPlayerType.getSelectedItem()){
                    case "Human":
                        player.dispose();
                        player = new PlayerHuman(player.getColor(), player.getTeam());
                        break;
                    case "AI":
                        player.dispose();
                        player = new PlayerAI(player.getColor(), player.getTeam());
                        break;
                }
            }
        });

        BtnDel.setText("X");
        BtnDel.setMargin(new Insets(0,0,0,0));
        BtnDel.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parent.removePlayer(THIS.player.getId());
                player = null;
                parent = null;
            }
        });

        refresh();
        
        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnDel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPlayerID)
                .addGap(18, 18, 18)
                .addComponent(boxPlayerType, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(boxColor, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(boxTeam, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnDel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPlayerID)
                        .addComponent(boxPlayerType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(boxColor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(boxTeam, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
    }// </editor-fold>                                                            

    // Variables declaration - do not modify                     
    private JButton BtnDel;
    private JComboBox boxColor;
    private JComboBox boxPlayerType;
    private JComboBox boxTeam;
    private JLabel lblPlayerID;
    // End of variables declaration                   
}
